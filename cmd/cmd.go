package cmd

import (
	"io/ioutil"
	"os"
	"path"

	"github.com/appist/appy/core"
	"github.com/spf13/cobra"
)

// AppCmd wraps the information of what a command line is about.
type AppCmd = cobra.Command

var (
	mainAssets       = "app/assets.go"
	logger           *core.AppLogger
	root             *AppCmd
	reservedCmdNames = map[string]bool{}

	// ExactArgs returns an error if there are not exactly n args.
	ExactArgs = cobra.ExactArgs

	// ExactValidArgs returns an error if
	// there are not exactly N positional args OR
	// there are any positional args that are not in the `ValidArgs` field of `Command`
	ExactValidArgs = cobra.ExactValidArgs

	// MinimumNArgs returns an error if there is not at least N args.
	MinimumNArgs = cobra.MinimumNArgs

	// MaximumNArgs returns an error if there are more than N args.
	MaximumNArgs = cobra.MaximumNArgs

	// NoArgs returns an error if any args are included.
	NoArgs = cobra.NoArgs

	// OnlyValidArgs returns an error if any args are not in the list of ValidArgs.
	OnlyValidArgs = cobra.OnlyValidArgs

	// RangeArgs returns an error if the number of args is not within the expected range.
	RangeArgs = cobra.RangeArgs
)

// Init initializes the root command instance.
func Init(l *core.AppLogger) {
	logger = l
	cmdName := path.Base(os.Args[0])
	if cmdName == "main" {
		wd, _ := os.Getwd()
		cmdName = path.Base(wd)
	}

	root = &AppCmd{
		Use:     cmdName,
		Short:   "An opinionated productive web framework that helps scaling business easier.",
		Version: core.VERSION,
	}
}

// AddCommand adds a custom command.
func AddCommand(command *AppCmd) {
	if _, ok := reservedCmdNames[command.Name()]; ok {
		logger.Fatalf("\"%s\" command name is reserved, please update the command name.", command.Name())
	}

	root.AddCommand(command)
}

// Run executes the root command.
func Run() {
	root.Execute()
}

func generateMainAssets() {
	os.Remove(mainAssets)

	template := []byte(`
// Generated by appy. DO NOT EDIT.
package main
import "net/http"
var assets http.FileSystem
`)
	err := ioutil.WriteFile(mainAssets, template, 0644)
	if err != nil {
		logger.Fatal(err)
	}
}
