package test

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"github.com/stretchr/testify/suite"
)

// AssertionT provides assertion methods around the TestingT interface.
type AssertionT = assert.Assertions

// RequireT provides assertion methods around the TestingT interface.
type RequireT = require.Assertions

// SuiteT is a basic testing suite with methods for storing and retrieving the current *testing.T context.
type SuiteT = suite.Suite

// AfterT has a function to be executed right after the test finishes and receives the suite and test names as input.
type AfterT = suite.AfterTest

// BeforeT has a function to be executed right before the test starts and receives the suite and test names as input.
type BeforeT = suite.BeforeTest

// SetupAllT has a SetupSuite method, which will run before the tests in the suite are run.
type SetupAllT = suite.SetupAllSuite

// SetupEachT has a SetupTest method, which will run before each test in the suite.
type SetupEachT = suite.SetupTestSuite

// TearDownAllT has a TearDownSuite method, which will run after all the tests in the suite have been run.
type TearDownAllT = suite.TearDownAllSuite

// TearDownEachT has a TearDownTest method, which will run after each test in the suite.
type TearDownEachT = suite.TearDownTestSuite

// TestingSuitT can store and return the current *testing.T context generated by 'go test'.
type TestingSuitT = suite.TestingSuite

// Run takes a testing suite and runs all of the tests attached to it.
var Run = suite.Run

// NewAssert makes a new AssertionT object for the specified TestingT.
func NewAssert(t *testing.T) *AssertionT {
	return assert.New(t)
}

// NewRequire makes a new RequireT object for the specified TestingT.
func NewRequire(t *testing.T) *RequireT {
	return require.New(t)
}
