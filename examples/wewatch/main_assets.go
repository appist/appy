// Code generated by vfsgen; DO NOT EDIT.

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// assets statically implements the virtual filesystem provided to vfsgen.
var assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 10, 6, 13, 46, 1, 329550250, time.UTC),
		},
		"/.ssr": &vfsgen۰DirInfo{
			name:    ".ssr",
			modTime: time.Date(2019, 10, 6, 13, 46, 1, 331251865, time.UTC),
		},
		"/.ssr/locales": &vfsgen۰DirInfo{
			name:    "locales",
			modTime: time.Date(2019, 10, 6, 13, 46, 1, 331972724, time.UTC),
		},
		"/.ssr/locales/en.yml": &vfsgen۰CompressedFileInfo{
			name:             "en.yml",
			modTime:          time.Date(2019, 10, 6, 13, 46, 1, 331519236, time.UTC),
			uncompressedSize: 180,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\xc9\x4f\xcf\xcc\xb3\x52\xf0\x01\x51\x5c\x5c\xb9\xa9\xc5\xc5\x89\xe9\xa9\x56\x5c\x0a\x0a\x51\xa9\x45\xf9\x56\x0a\x1e\x99\x3a\x0a\xd5\xd5\x7a\x7e\x89\xb9\xa9\xb5\xb5\x8a\x0a\x91\xf9\xa5\x0a\x19\x89\x65\xa9\x20\x31\xe7\xfc\xd2\xbc\x92\xda\x5a\x05\xa8\x1e\x3d\x2e\x05\x05\xff\xbc\x54\x92\xb5\x94\x64\xa4\x16\x91\xa2\xa9\x58\x8f\x0b\x10\x00\x00\xff\xff\x29\x82\x38\x8a\xb4\x00\x00\x00"),
		},
		"/.ssr/locales/zh-CN.yml": &vfsgen۰CompressedFileInfo{
			name:             "zh-CN.yml",
			modTime:          time.Date(2019, 10, 6, 13, 46, 1, 331865020, time.UTC),
			uncompressedSize: 183,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\xc9\x4f\xcf\xcc\xb3\x52\x78\x3e\x73\xf7\xd3\xbd\x53\xb9\xb8\x72\x53\x8b\x8b\x13\xd3\x53\xad\xb8\x14\x14\xa2\x52\x8b\xf2\xad\x14\x9e\x4e\x5f\xa1\xa3\x50\x5d\xad\xe7\x97\x98\x9b\x5a\x5b\xab\xa8\xf0\xac\x69\xc5\xb3\x39\x9d\xd5\xd5\x7a\xce\xf9\xa5\x79\x25\xb5\xb5\x4f\x3b\x66\xbe\x58\xb7\xfe\x59\xe3\xfa\xc7\x0d\x4d\x5c\x0a\x0a\xfe\x79\xa9\xa4\xeb\x29\xc9\x48\x2d\x22\x51\x17\x20\x00\x00\xff\xff\xdc\xa2\x7c\x5b\xb7\x00\x00\x00"),
		},
		"/.ssr/locales/zh-TW.yml": &vfsgen۰CompressedFileInfo{
			name:             "zh-TW.yml",
			modTime:          time.Date(2019, 10, 6, 13, 46, 1, 332102847, time.UTC),
			uncompressedSize: 183,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\xc9\x4f\xcf\xcc\xb3\x52\x78\x3e\x73\xf7\xd3\xd6\xa5\x5c\x5c\xb9\xa9\xc5\xc5\x89\xe9\xa9\x56\x5c\x0a\x0a\x51\xa9\x45\xf9\x56\x0a\x4f\xa7\xaf\xd0\x51\xa8\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\x55\x54\x78\xd6\xb4\xe2\xd9\x9c\xce\xea\x6a\x3d\xe7\xfc\xd2\xbc\x92\xda\xda\xa7\x9d\xed\x2f\x56\x74\x3d\x6b\x5c\xff\xb8\xa1\x89\x4b\x41\xc1\x3f\x2f\x95\x74\x3d\x25\x19\xa9\x45\x24\xea\x02\x04\x00\x00\xff\xff\x8e\xfc\x65\x0a\xb7\x00\x00\x00"),
		},
		"/.ssr/views": &vfsgen۰DirInfo{
			name:    "views",
			modTime: time.Date(2019, 10, 6, 13, 46, 1, 330857196, time.UTC),
		},
		"/.ssr/views/layouts": &vfsgen۰DirInfo{
			name:    "layouts",
			modTime: time.Date(2019, 10, 6, 13, 46, 1, 329868949, time.UTC),
		},
		"/.ssr/views/layouts/default.html": &vfsgen۰CompressedFileInfo{
			name:             "default.html",
			modTime:          time.Date(2019, 10, 6, 13, 46, 1, 329993622, time.UTC),
			uncompressedSize: 624,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x92\x3f\x8f\xd4\x30\x10\xc5\xfb\xfb\x14\x73\x2e\xe8\xe2\xd1\xc2\x95\x4e\x0a\xfe\x34\x34\x20\x81\x84\xa8\x90\xd7\x9e\x6c\x1c\x1c\x3b\x78\x66\x17\x56\xab\xfd\xee\x28\x71\x40\x62\xb5\x34\x57\x65\x66\x32\xfa\xf9\xf9\x3d\x9b\xc7\xb7\x1f\xde\x7c\xfe\xfa\xf1\x1d\x0c\x32\xc5\xee\xc1\x2c\x1f\x88\x36\x1d\x5a\x45\x49\x75\x0f\x00\x66\x20\xeb\x97\x02\xc0\x48\x90\x48\xdd\x17\x8a\x2e\x4f\x64\xb0\xb6\xf5\x57\x0c\xe9\xfb\x5a\x01\x0c\x85\xfa\x56\x21\x3a\x9f\x46\xd6\x2e\xe6\xa3\xef\xa3\x2d\xa4\x5d\x9e\xd0\x8e\xf6\x17\xc6\xb0\x67\x94\x9f\x41\x84\x4a\xb3\xcf\x59\x58\x8a\x9d\xf1\x49\xbf\xd2\x3b\x74\xcc\xf8\x77\xa6\xa7\x90\xb4\x63\x56\x1b\xbb\x50\x6c\x15\xcb\x39\x12\x0f\x44\x52\xc7\xb8\xea\xc4\x2a\x74\x29\xf7\xd9\x9f\x37\x5d\x3e\x9c\xc0\x45\xcb\xdc\x2a\x97\x93\xd8\x90\xa8\x34\x7d\x3c\x06\xaf\xba\x8d\x79\xb9\x80\xd0\x34\x47\x2b\x04\x8a\x07\x5b\xc8\x7f\x5b\x58\x54\x14\x68\xb8\x5e\xef\xad\x2d\x2c\x4a\xf2\xff\x85\x8d\xd3\xe7\x2c\xff\x70\x0c\xfa\x70\x5a\x55\x02\x98\xc7\xa6\x81\xf1\xc7\x91\xca\x19\x5e\xc0\xeb\x3f\x77\x86\xf7\x9f\xa0\x69\x36\xfd\xec\x4a\x98\x05\xb8\xb8\xc5\xd2\xc5\x3d\x7d\xc8\xf9\x10\xc9\xce\x81\x6f\x1c\xad\x28\xdc\xe9\xdd\x4b\xfd\xb4\x75\xab\x81\x23\xab\xce\x60\x45\xdd\xe5\x3e\x33\xaa\xf1\x36\xa9\xdb\x83\x0c\xd6\x28\x0c\xd6\xf7\xf5\x3b\x00\x00\xff\xff\xb9\xaa\xda\xca\x70\x02\x00\x00"),
		},
		"/.ssr/views/shared": &vfsgen۰DirInfo{
			name:    "shared",
			modTime: time.Date(2019, 10, 6, 13, 46, 1, 330496622, time.UTC),
		},
		"/.ssr/views/shared/footer.html": &vfsgen۰FileInfo{
			name:    "footer.html",
			modTime: time.Date(2019, 10, 6, 13, 46, 1, 330394706, time.UTC),
			content: []byte("\x7b\x7b\x20\x64\x65\x66\x69\x6e\x65\x20\x22\x73\x68\x61\x72\x65\x64\x5f\x66\x6f\x6f\x74\x65\x72\x22\x20\x7d\x7d\x0a\x20\x20\x3c\x66\x6f\x6f\x74\x65\x72\x3e\x43\x6f\x6e\x74\x61\x63\x74\x20\x55\x73\x3c\x2f\x66\x6f\x6f\x74\x65\x72\x3e\x0a\x7b\x7b\x20\x65\x6e\x64\x20\x7d\x7d\x0a"),
		},
		"/.ssr/views/shared/header.html": &vfsgen۰FileInfo{
			name:    "header.html",
			modTime: time.Date(2019, 10, 6, 13, 46, 1, 330714261, time.UTC),
			content: []byte("\x7b\x7b\x20\x64\x65\x66\x69\x6e\x65\x20\x22\x73\x68\x61\x72\x65\x64\x5f\x68\x65\x61\x64\x65\x72\x22\x20\x7d\x7d\x0a\x20\x20\x3c\x68\x65\x61\x64\x65\x72\x3e\x41\x77\x65\x73\x6f\x6d\x65\x20\x41\x70\x70\x79\x3c\x2f\x68\x65\x61\x64\x65\x72\x3e\x0a\x7b\x7b\x20\x65\x6e\x64\x20\x7d\x7d\x0a"),
		},
		"/.ssr/views/welcome": &vfsgen۰DirInfo{
			name:    "welcome",
			modTime: time.Date(2019, 10, 6, 13, 46, 1, 330987204, time.UTC),
		},
		"/.ssr/views/welcome/index.html": &vfsgen۰FileInfo{
			name:    "index.html",
			modTime: time.Date(2019, 10, 6, 13, 46, 1, 331098446, time.UTC),
			content: []byte("\x7b\x7b\x20\x64\x65\x66\x69\x6e\x65\x20\x22\x63\x6f\x6e\x74\x65\x6e\x74\x22\x20\x7d\x7d\x0a\x20\x20\x7b\x7b\x2e\x6d\x65\x73\x73\x61\x67\x65\x7d\x7d\x0a\x7b\x7b\x20\x65\x6e\x64\x20\x7d\x7d\x0a"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/.ssr"].(os.FileInfo),
	}
	fs["/.ssr"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/.ssr/locales"].(os.FileInfo),
		fs["/.ssr/views"].(os.FileInfo),
	}
	fs["/.ssr/locales"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/.ssr/locales/en.yml"].(os.FileInfo),
		fs["/.ssr/locales/zh-CN.yml"].(os.FileInfo),
		fs["/.ssr/locales/zh-TW.yml"].(os.FileInfo),
	}
	fs["/.ssr/views"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/.ssr/views/layouts"].(os.FileInfo),
		fs["/.ssr/views/shared"].(os.FileInfo),
		fs["/.ssr/views/welcome"].(os.FileInfo),
	}
	fs["/.ssr/views/layouts"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/.ssr/views/layouts/default.html"].(os.FileInfo),
	}
	fs["/.ssr/views/shared"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/.ssr/views/shared/footer.html"].(os.FileInfo),
		fs["/.ssr/views/shared/header.html"].(os.FileInfo),
	}
	fs["/.ssr/views/welcome"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/.ssr/views/welcome/index.html"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰FileInfo:
		return &vfsgen۰File{
			vfsgen۰FileInfo: f,
			Reader:          bytes.NewReader(f.content),
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰FileInfo is a static definition of an uncompressed file (because it's not worth gzip compressing).
type vfsgen۰FileInfo struct {
	name    string
	modTime time.Time
	content []byte
}

func (f *vfsgen۰FileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰FileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰FileInfo) NotWorthGzipCompressing() {}

func (f *vfsgen۰FileInfo) Name() string       { return f.name }
func (f *vfsgen۰FileInfo) Size() int64        { return int64(len(f.content)) }
func (f *vfsgen۰FileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰FileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰FileInfo) IsDir() bool        { return false }
func (f *vfsgen۰FileInfo) Sys() interface{}   { return nil }

// vfsgen۰File is an opened file instance.
type vfsgen۰File struct {
	*vfsgen۰FileInfo
	*bytes.Reader
}

func (f *vfsgen۰File) Close() error {
	return nil
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
